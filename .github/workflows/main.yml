name: RDP

on: [workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Download ngrok
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive ngrok.zip -Force
          .\ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Enable RDP & create temp admin user
        run: |
          $pw = [System.Web.Security.Membership]::GeneratePassword(14,3)
          Write-Host "Generated password (not printed for security)"
          net user temp_rdp_user $pw /add
          net localgroup administrators temp_rdp_user /add
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          setx TEMP_RDP_PASS $pw
        shell: powershell

      - name: Start ngrok (background) and show tunnel
        run: |
          Start-Process -FilePath .\ngrok.exe -ArgumentList "tcp 3389" -NoNewWindow
          Start-Sleep -Seconds 4
          try {
            $tunnels = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels -ErrorAction Stop
            $tcp = $tunnels.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
            if ($null -ne $tcp) {
              Write-Host "Ngrok TCP forwarding: $($tcp.public_url)"
            } else {
              Write-Host "No TCP tunnel found. API output:"
              $tunnels | ConvertTo-Json -Depth 5
              exit 1
            }
          } catch {
            Write-Host "Could not reach ngrok API:" $_.Exception.Message
            exit 1
          }
        shell: powershell

      - name: Keep job alive briefly (example: 5 minutes) while you connect
        run: |
          Write-Host "Job will sleep now to allow RDP connection window (adjust as needed)."
          Start-Sleep -Seconds 300
        shell: powershell

      - name: Cleanup temp user
        if: always()
        run: |
          net user temp_rdp_user /delete
          Write-Host "temp_rdp_user deleted (if existed)."
        shell: powershell
